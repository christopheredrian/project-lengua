<div id="app">
    <div class="row">
        <h2 class="col-10">Word Listing</h2>
        {{!--
        <button class="">Add Word</button> --}}
        <button v-on:click="addWord()" type="button" class="btn btn-success mb-4 float-right col-2" data-toggle="modal" data-target="#modal">
            Add Word
        </button>
    </div>

    <div class="row">
        <div class="col-12 mb-3">
            <div id="alerts">

            </div>
            <input class="float-right form-control col-4" type="text" v-model="search" placeholder="Search word...">
        </div>
        <div class="col-12">
            <ul class="list-inline float-right">
                <li v-for="l in letters" class="list-inline-item">
                    <a v-bind:class="['social-icon text-xs-center', {'btn btn-primary active' : l.toLowerCase() === letter }]" v-on:click.stop="getWords(search, dialect, l)"
                        href="#">\{{ l }}</a>
                </li>
                <li class="list-inline-item">
                    <a class="social-icon text-xs-center btn btn-danger btn-xs" v-on:click.stop="getWords('', dialect)" href="#">Clear Letter Filtering</a>
                </li>
            </ul>
            <p>
        </div>
    </div>
    <div class="row m-1">
        <div class="col-3">
            <h3>Languages</h3>
            <ul class="nav nav-pills flex-column">
                <li>
                    <a class="nav-link" href="/words/afinn-165" target="_blank">AFINN-165 </a>
                </li>
                <li class="nav-item">
                    <a v-bind:class="['nav-link', {'active' : '' === dialect }]" href="#" v-on:click.stop="getWords('', '')">
                        All
                        <span class="float-right badge badge-pill badge-warning">\{{ totalWordCount }}</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a v-bind:class="['nav-link', {'active' : 'unlisted' === dialect }]" href="#" v-on:click.stop="getWords(search, 'unlisted')">
                        Unlisted
                        <span class="float-right badge badge-pill badge-warning">\{{ totalUnlistedCount}}</span>
                    </a>
                </li>
                <li class="nav-item" v-for="d in dialects">
                    <a v-bind:class="['nav-link', {'active' : d._id.dialect === dialect }]" v-if="d._id.dialect !== 'unlisted' && d._id.dialect !== ''"
                        v-on:click.stop="getWords(search, d._id.dialect)" href="#">
                        \{{ d._id.dialect }}
                        <span class="float-right badge badge-pill badge-warning">\{{ d.count}}</span>
                    </a>
                </li>

            </ul>
        </div>
        <ul class="col-9">
            <div class="row ">
                <div class="mb-2">
                    <p>
                        <strong>Total Displayed Words:
                            <span class="badge badge-pill badge-success">\{{words.length}}</span>
                        </strong>
                    </p>
                </div>
                <table id="wordsTable" class="table table-sm ">
                    <thead>
                        <tr>
                            <th>Word</th>
                            <th>Score</th>
                            <th>Dialect</th>
                            <th>Date Added</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody class="table-hover">
                        <tr v-for="word in words">
                            <td>\{{ word.word }}</td>
                            <td>\{{ word.score}}</td>
                            <td>\{{ word.dialect }}</td>
                            <td>\{{ word.date }}</td>
                            <td>
                                {{!--
                                <a v-bind:href="'/words/edit/' + word._id" class="btn btn-xs btn-dark btn-block mb-2">Edit</a> --}}
                                <button v-on:click="editWord(word._id,word.word, word.score, word.dialect)" type="button" class="btn btn-xs btn-warning btn-block mb-2"
                                    data-toggle="modal" data-target="#modal">
                                    Edit
                                </button>
                                {{!--
                                <form :action="'/words/delete/' +  word._id " method="post" onclick="return confirm('Are you sure you want to delete this word?')">
                                    <input type="submit" class="btn btn-block btn-danger btn-xs" value="Delete">
                                </form> --}}
                                <button onclick="return confirm('Are you sure you want to delete this word?')" v-on:click="deleteWord(word._id)" class="btn btn-xs btn-danger btn-block mb-2">
                                    Delete
                                </button>

                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

        </ul>

    </div>
    <div class="md">
        <!-- Add/Update Modal -->
        <div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="modalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modalTitle">\{{ this.modalText }} Word</h5>
                        <button id="modalClose" type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="card card-body">
                            <h3>Edit Word</h3>
                            {{!-- If there are errors display the list of errors --}}
                            <ul v-if="modalErrors">
                                <li class="text-danger" v-for="errorItem in modalErrors">\{{ errorItem.text }}</li>
                            </ul>
                            <form @submit.prevent="updateWord()">
                                <div class="form-group">
                                    <label for="word">Word</label>
                                    <input id="word" name="word" type="text" class="form-control" v-model="modalData.word" required>
                                </div>

                                <div class="form-group">
                                    <label for="dialect">Dialect</label>
                                    <select class="form-control" name="dialect" id="dialect" v-model="modalData.dialect" required>
                                        <option value="">Please select a dialect/language</option>
                                        <option value="filipino">Filipino</option>
                                        <option value="kapampangan">Kapampangan</option>
                                        <option value="ilocano">Ilocano</option>
                                        <option value="pangasinan">Pangasinan</option>
                                        <option value="english">English</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="score">Score</label>
                                    <input id="score" name="score" type="number" class="form-control" placeholder="-5 to 5" v-model="modalData.score" required>
                                </div>
                                <input type="submit" class="d-none">
                            </form>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button v-on:click="updateWord()" class="btn btn-primary" type="submit">Submit</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/vue"></script>
<script src="https://cdn.jsdelivr.net/npm/vue-resource@1.5.0"></script> {{!--
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/bs4/jq-3.2.1/dt-1.10.16/datatables.min.css" /> --}} {{!--
<script type="text/javascript" src="https://cdn.datatables.net/v/bs4/jq-3.2.1/dt-1.10.16/datatables.min.js"></script> --}}

<script>
    var app = new Vue({
        el: '#app',
        data: {
            message: 'Hello Vue!',
            words: [],
            letter: '',
            search: '',
            dialects: [],
            dialect: '',
            letters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),
            totalWordCount: 0,
            totalUnlistedCount: 0,
            modalText: 'Add',
            modalData: {
                id: '',
                word: 'unlisted',
                score: 0,
                dialect: 'unlisted'
            },
            modalErrors: []
        },
        methods: {
            getWords: function (word, dialect, letter) {
                this.dialect = dialect;
                if (!dialect) {
                    dialect = null
                }
                if (!letter) {
                    this.letter = '';
                } else {
                    this.letter = letter.toLowerCase();
                }

                word = this.search;
                dialect = this.dialect;
                letter = this.letter;
                console.log(word, dialect, letter);
                // GET /someUrl
                this.$http.get('/api/words', { params: { word: word, dialect: dialect, letter: letter } }).then(response => {
                    // get body data
                    this.words = JSON.parse(response.bodyText);
                }, response => {
                    // error callback
                    alert('Unable to get words...');
                });
            },
            getDialects: function () {
                this.$http.get('/api/dialects', {}).then(response => {
                    this.dialects = JSON.parse(response.bodyText);
                }, response => {
                    alert('Unable to get dialects...');
                });
            },
            getTotalWordCount: function () {
                this.$http.get('/api/totalWordCount', {}).then(response => {
                    this.totalWordCount = JSON.parse(response.bodyText).totalWordCount;
                }, response => {
                    alert('Unable to get total word count...');
                });
            },
            getTotalUnlistedCount: function () {
                this.$http.get('/api/totalUnlistedCount', {}).then(response => {
                    this.totalUnlistedCount = JSON.parse(response.bodyText).totalUnlistedCount;
                }, response => {
                    alert('Unable to get total unlisted word count...');
                });
            },
            editWord: function (id, word, score, dialect) {
                this.modalErrors = [];
                // Populate modal
                this.modalData = {
                    id, word, score, dialect
                }
                this.modalText = "Update";
            },
            addWord: function () {
                this.modalErrors = [];
                // Populate modal
                this.modalData = {
                    word: '', score: '', dialect: ''
                }
                this.modalText = "Add";
            },

            // Modal Function for update and add word
            updateWord: function () {
                if (this.modalText === 'Add') {
                    // Add word
                    this.$http.post('/api/words/add', this.modalData).then(response => {
                        // There was an error
                        if (response.body.errors) {
                            this.modalErrors = response.body.errors;
                            $('#modal').modal('show');
                        } else {
                            // Add message with link
                            toastr.success('Successfully added new word!')
                            // Refresh word list
                            this.refreshWords();
                            // Close modal
                            $('#modalClose').click();
                        }

                    }, response => {
                        alert('There was an error.' + JSON.stringify(response));
                    });
                } else if (this.modalText === 'Update') {
                    // Update word
                    this.$http.post('/api/words/update', this.modalData).then(response => {
                        if (response.body.errors) {
                            this.modalErrors = response.body.errors;
                            $('#modal').modal('show');
                        } else {
                            toastr.success('Successfully updated word!')
                            // Refresh word list
                            this.refreshWords();
                            // Close modal
                            $('#modalClose').click();
                        }
                        // Add message with link

                    }, response => {
                        alert('Unable to get dialects...' + JSON.stringify(response));
                    });
                } else {
                    alert('There was an error');
                }

            },
            deleteWord: function (id) {
                this.$http.post('/api/words/delete/' + id, {}).then(response => {
                    toastr.success('Successfully deleted word!')
                    // Refresh word list
                    this.refreshWords();
                }, response => {
                    alert('Unable to get dialects...' + JSON.stringify(response));
                });
            },
            // Utility function for refreshing word list
            refreshWords: function () {
                this.getWords(this.search, this.dialect, this.letter);
                this.getDialects();
                this.getTotalWordCount();
                this.getTotalUnlistedCount();
                // Empty modal
                this.modalData = {};

            }
        },
        watch: {
            search: function (val, oldValue) {
                this.search = val;
                this.letter = '';
                this.getWords(val, this.dialect, this.letter);
            }
        },
        beforeMount() {
            this.getWords('');
            this.getDialects();
            this.getTotalWordCount();
            this.getTotalUnlistedCount();

        },
        mounted() {
            this.dialect = '';
        }
    })
</script>